// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerTemplateServiceClient is the client API for ContainerTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerTemplateServiceClient interface {
	GetContainerTemplateList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainerTemplateList, error)
}

type containerTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerTemplateServiceClient(cc grpc.ClientConnInterface) ContainerTemplateServiceClient {
	return &containerTemplateServiceClient{cc}
}

func (c *containerTemplateServiceClient) GetContainerTemplateList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainerTemplateList, error) {
	out := new(ContainerTemplateList)
	err := c.cc.Invoke(ctx, "/ContainerTemplateService/GetContainerTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerTemplateServiceServer is the server API for ContainerTemplateService service.
// All implementations must embed UnimplementedContainerTemplateServiceServer
// for forward compatibility
type ContainerTemplateServiceServer interface {
	GetContainerTemplateList(context.Context, *emptypb.Empty) (*ContainerTemplateList, error)
	mustEmbedUnimplementedContainerTemplateServiceServer()
}

// UnimplementedContainerTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerTemplateServiceServer struct {
}

func (UnimplementedContainerTemplateServiceServer) GetContainerTemplateList(context.Context, *emptypb.Empty) (*ContainerTemplateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerTemplateList not implemented")
}
func (UnimplementedContainerTemplateServiceServer) mustEmbedUnimplementedContainerTemplateServiceServer() {
}

// UnsafeContainerTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerTemplateServiceServer will
// result in compilation errors.
type UnsafeContainerTemplateServiceServer interface {
	mustEmbedUnimplementedContainerTemplateServiceServer()
}

func RegisterContainerTemplateServiceServer(s grpc.ServiceRegistrar, srv ContainerTemplateServiceServer) {
	s.RegisterService(&ContainerTemplateService_ServiceDesc, srv)
}

func _ContainerTemplateService_GetContainerTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerTemplateServiceServer).GetContainerTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContainerTemplateService/GetContainerTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerTemplateServiceServer).GetContainerTemplateList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerTemplateService_ServiceDesc is the grpc.ServiceDesc for ContainerTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContainerTemplateService",
	HandlerType: (*ContainerTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContainerTemplateList",
			Handler:    _ContainerTemplateService_GetContainerTemplateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/container_template.proto",
}
